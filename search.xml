<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“水杉在线”-集成RocketMQ（二、自定义拦截器）</title>
      <link href="/2023/05/29/shui-shan-zai-xian-ji-cheng-rocketmq-er-zi-ding-yi-lan-jie-qi/"/>
      <url>/2023/05/29/shui-shan-zai-xian-ji-cheng-rocketmq-er-zi-ding-yi-lan-jie-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、自定义MyBatis拦截器"><a href="#一、自定义MyBatis拦截器" class="headerlink" title="一、自定义MyBatis拦截器"></a>一、自定义<code>MyBatis</code>拦截器</h2><p>我们首先需要自定义一个拦截器来拦截我们指定的<code>sql</code>语句类型，比如<code>query</code>或者<code>update</code>。</p><p>对于拦截下来的<code>sql</code>语句我们可以根据自己的需要进行处理，比如我们将某些指定的<code>sql</code>语句发送到<code>rocketmq</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">mappedStatement</span> <span class="operator">=</span> (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (invocation.getArgs().length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            parameter = invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> mappedStatement.getBoundSql(parameter);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="type">RocketMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RocketMQProducer</span>(<span class="string">&quot;your-producer-group&quot;</span>, <span class="string">&quot;ip:9876&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line">        producer.sendMessage(<span class="string">&quot;topic&quot;</span>, sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送的sql语句为：\n&quot;</span> + sql);</span><br><span class="line">        producer.shutdown();</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、rocketmq生产者"><a href="#二、rocketmq生产者" class="headerlink" title="二、rocketmq生产者"></a>二、<code>rocketmq</code>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lucky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/5/9 14:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultMQProducer producer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RocketMQProducer</span><span class="params">(String producerGroup, String namesrvAddr)</span> &#123;</span><br><span class="line">        producer = <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(producerGroup);</span><br><span class="line">        producer.setNamesrvAddr(namesrvAddr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String topic, String message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(topic, message.getBytes());</span><br><span class="line">        producer.send(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、注册拦截器"><a href="#三、注册拦截器" class="headerlink" title="三、注册拦截器"></a>三、注册拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RocketMQ-拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RocketMQInterceptor <span class="title function_">myBatisInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RocketMQInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法：我们选择单元测试启动一个Mapper的查询方法。消费者模块单独启动一个微服务进行消费。</p><p>结果：测试拦截成功。</p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230509175633435.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230509175633435.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230509175633435"></p><p><img src="/img/%E2%80%9C%E6%B0%B4%E6%9D%89%E5%9C%A8%E7%BA%BF%E2%80%9D-RocketMQ%E9%9B%86%E6%88%90%EF%BC%88%E4%BA%8C%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%89/image-20230509175741934.png" class="lazyload placeholder" data-srcset="/img/%E2%80%9C%E6%B0%B4%E6%9D%89%E5%9C%A8%E7%BA%BF%E2%80%9D-RocketMQ%E9%9B%86%E6%88%90%EF%BC%88%E4%BA%8C%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%89/image-20230509175741934.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230509175741934"></p><h2 id="四、踩坑记录"><a href="#四、踩坑记录" class="headerlink" title="四、踩坑记录"></a>四、踩坑记录</h2><p>原本在生产者和消费者模块全部采用<code>RocketTemplate</code>来处理，因为实现了自动装配，不需要指定namesrv、group组等，但是由于未知原因在拦截器中注入<code>RocketTemplate</code>出现一个问题就是注入不进来，异常处理后就是报空指针异常，最后试了很多方法都不行。于是改变策略，将测试、本地、生产端不同的<code>mq</code>配置均放在<code>nacos</code>中。通过默认生产者代码进行处理，封装一个新的生产者，进而曲线救国，解决了问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“水杉在线”集成RocketMQ(一、部署及测试)</title>
      <link href="/2023/04/29/shui-shan-zai-xian-ji-cheng-rocketmq-yi-bu-shu-ji-ce-shi/"/>
      <url>/2023/04/29/shui-shan-zai-xian-ji-cheng-rocketmq-yi-bu-shu-ji-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="“水杉在线”-RocketMQ集成（一、部署及测试）"><a href="#“水杉在线”-RocketMQ集成（一、部署及测试）" class="headerlink" title="“水杉在线”-RocketMQ集成（一、部署及测试）"></a>“水杉在线”-<code>RocketMQ</code>集成（一、部署及测试）</h1><h2 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h2><p>这里我们选择了前两天刚刚发布的最新版本5.1.0版本，听说有很多提升，相比于版本4来说。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取rocketmq</span> </span><br><span class="line">docker pull apache/rocketmq:5.1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取rocketmq-dashboard</span></span><br><span class="line">docker pull styletang/rocketmq-console-ng:latest</span><br></pre></td></tr></table></figure><h2 id="2、环境配置"><a href="#2、环境配置" class="headerlink" title="2、环境配置"></a>2、环境配置</h2><p>目前本地以及测试环境主要是单机部署 ，因此<code>namesrv</code>和<code>broker</code>都部署在一个机器上，同时请注意端口映射以及防火墙以及数据卷挂载的目录，以及<code>broker</code>的配置文件，同时<code>command</code>命令注意使<code>broker.conf</code>配置生效。对于内存分配如果是生产环境尽量大一些，比如<code>8G</code>起步。</p><p>**注意执行 <code>chmod 777 -R your_rocketmq_dir</code>给你挂载的数据卷写入的权限，否则日志和数据等写不进来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  namesrv:</span><br><span class="line">    image: apache/rocketmq:5.1.0</span><br><span class="line">    container_name: rocketmq-namesrv</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9876:9876&quot;</span><br><span class="line">    environment:</span><br><span class="line">      JAVA_OPT: -server -Xms2g -Xmx2g -Xmn1g</span><br><span class="line">    command: sh mqnamesrv</span><br><span class="line">    volumes:</span><br><span class="line">      - your_namesrv_logs_dir:/home/rocketmq/logs/rocketmqlogs</span><br><span class="line"></span><br><span class="line">  broker:</span><br><span class="line">    image: apache/rocketmq:5.1.0</span><br><span class="line">    container_name: rocketmq-broker</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;10911:10911&quot;</span><br><span class="line">      - &quot;10909:10909&quot;</span><br><span class="line">      - &quot;10912:10912&quot;</span><br><span class="line">    environment:</span><br><span class="line">      JAVA_OPT_EXT: -server -Xms2g -Xmx2g -Xmn1g</span><br><span class="line">    command: sh mqbroker -n rocketmq-namesrv:9876 -c /home/rocketmq/rocketmq-5.1.0/conf/broker.conf</span><br><span class="line">    depends_on:</span><br><span class="line">      - namesrv</span><br><span class="line">    volumes:</span><br><span class="line">      - .your_broker_conf_dir:/home/rocketmq/rocketmq-5.1.0/conf/broker.conf</span><br><span class="line">      - your_namesrv_logs_dir:/home/rocketmq/logs/rocketmqlogs</span><br><span class="line">      - your_namesrv_store_dir:/home/rocketmq/store</span><br><span class="line"></span><br><span class="line">  dashboard:</span><br><span class="line">    image: styletang/rocketmq-console-ng:latest</span><br><span class="line">    container_name: rocketmq-dashboard</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8086:8080&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - rocketmq.config.namesrvAddr=rocketmq-namesrv:9876</span><br></pre></td></tr></table></figure><h2 id="3、启动RocketMQ"><a href="#3、启动RocketMQ" class="headerlink" title="3、启动RocketMQ"></a>3、启动<code>RocketMQ</code></h2><p>请注意使用<code>docker-compose up -d</code>来启动，在<code>broker.conf</code>中建议明确<code>brokerIP</code></p><p><code>broker.conf</code>配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">brokerClusterName = DefaultCluster</span><br><span class="line">brokerName = broker-a </span><br><span class="line">brokerId = 0</span><br><span class="line">deleteWhen = 04</span><br><span class="line">fileReservedTime = 48</span><br><span class="line">brokerRole = ASYNC_MASTER</span><br><span class="line">flushDiskType = ASYNC_FLUSH</span><br><span class="line">brokerIP1 = your_broker_ip # 这个ip一般就是你宿主机的外网ip 不要localhost/127.0.0.1 可能在springboot测试时无法连接</span><br><span class="line">listenPort = 10911</span><br><span class="line">autoCreateTopicEnable = true</span><br><span class="line">autoCreateSubscriptionGroup = true</span><br></pre></td></tr></table></figure><p>启动成功后可以通过<code>docker logs -f [container_id] </code>查看相关日志 确定是否成功</p><p>也可以通过<code>dashboard</code>来进行测试，如下图所示：</p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230429163335112.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230429163335112.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230429163335112"></p><p>你可以通过这个<code>dashboard</code>来进行一些消息的生产和消费以确定是否可以正常收发消息。</p><h2 id="4、SpringCloud整合RocketMQ"><a href="#4、SpringCloud整合RocketMQ" class="headerlink" title="4、SpringCloud整合RocketMQ"></a>4、<code>SpringCloud</code>整合<code>RocketMQ</code></h2><h3 id="4-1、pom-xml引入依赖"><a href="#4-1、pom-xml引入依赖" class="headerlink" title="4.1、pom.xml引入依赖"></a>4.1、pom.xml引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2、application-yml中配置基本变量"><a href="#4-2、application-yml中配置基本变量" class="headerlink" title="4.2、application.yml中配置基本变量"></a>4.2、application.yml中配置基本变量</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mq:</span></span><br><span class="line">  <span class="attr">topic:</span> <span class="string">your_topic</span></span><br><span class="line">  <span class="attr">consumer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">your-consumer-group</span></span><br><span class="line">    <span class="attr">retry-times-when-send-failed:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">send-message-timeout:</span> <span class="number">50000</span> <span class="comment"># timeout建议给大一点儿 要不然报错</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="string">namesrvIP:9876</span> <span class="comment"># IP是你部署的</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">your-producer-group</span></span><br><span class="line">    <span class="attr">retry-times-when-send-failed:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">send-message-timeout:</span> <span class="number">50000</span></span><br></pre></td></tr></table></figure><h3 id="4-3、生产者连接并发送消息"><a href="#4-3、生产者连接并发送消息" class="headerlink" title="4.3、生产者连接并发送消息"></a>4.3、生产者连接并发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMQProducer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    rocketMQTemplate.convertAndSend(<span class="string">&quot;shuishan-dev&quot;</span>,message);</span><br><span class="line">    System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230429164026706.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230429164026706.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230429164026706"></p><h3 id="4-4、消费者消费消息（最好新建一个module-or-server）"><a href="#4-4、消费者消费消息（最好新建一个module-or-server）" class="headerlink" title="4.4、消费者消费消息（最好新建一个module or server）"></a>4.4、消费者消费消息（最好新建一个module or server）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(consumerGroup = &quot;shuishan-consumer-group&quot;,topic = &quot;shuishan-dev&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConsumer</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到的消息&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230429164154656.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230429164154656.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230429164154656"></p><p>至此 最基本的<code>RocketMQ</code>部署并测试完成。</p><p>祝大家五一节快乐！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker和vsftpd协议搭建FTP服务器</title>
      <link href="/2023/04/16/ftp-deploy-by-docker/"/>
      <url>/2023/04/16/ftp-deploy-by-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="FTP内置服务器搭建"><a href="#FTP内置服务器搭建" class="headerlink" title="FTP内置服务器搭建"></a>FTP内置服务器搭建</h2><p>注意端口映射2020 -&gt; 20；2121 -&gt; 2121（如果你的20和21端口被占用的话）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">vsftpd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">fauria/vsftpd</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ftp_for_kirin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2020:20&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2121:21&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;21100-21110:21100-21110&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./files:/home/vsftpd</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FTP_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FTP_PASS=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_ADDRESS=127.0.0.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_MIN_PORT=21100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASV_MAX_PORT=21110</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_STDOUT=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_STDERR=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_FILE=/var/log/vsftpd.log</span></span><br></pre></td></tr></table></figure><p>文件存储目录在宿主机的<code>/work/docker/ftp/files/kirin/</code></p><p>用户名和密码自己设置即可</p><p><code>PASV_ADDRESS</code>为自己的宿主机<code>ip</code></p><p>测试成功与否：<code>MobaXTerm</code>或者<code>xftp</code>这类终端工具，可以连接上并且上传文件正常即搭建成功。</p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230416164014862.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230416164014862.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230416164014862"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops---基于Docker实现GitLab企业开发过程全自动化</title>
      <link href="/2023/04/04/dan-ji-bu-shu-gitlab-gitlab-runner-shi-xian-devops-liu-cheng-hua-ruan-jian-kai-fa-guo-cheng/"/>
      <url>/2023/04/04/dan-ji-bu-shu-gitlab-gitlab-runner-shi-xian-devops-liu-cheng-hua-ruan-jian-kai-fa-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Devops—基于Docker实现GitLab企业开发过程全自动化"><a href="#Devops—基于Docker实现GitLab企业开发过程全自动化" class="headerlink" title="Devops—基于Docker实现GitLab企业开发过程全自动化"></a>Devops—基于Docker实现GitLab企业开发过程全自动化</h1><h2 id="搭建该流程化过程起因"><a href="#搭建该流程化过程起因" class="headerlink" title="搭建该流程化过程起因"></a>搭建该流程化过程起因</h2><p>原项目gitlab仓库所在私服磁盘被docker数据占满，无法访问，容器寄掉了。于是自己动手在自己的私服上不想浪费那1TB的磁盘，于是从0开始完整搭建了gitlab仓库（企业用的比较多）、gitlab-runner（实现Devops的关键）、部署的全过程。下图是GitLab官网的介绍：<a href="https://about.gitlab.com/">The DevSecOps Platform | GitLab</a></p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404213900259.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404213900259.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230404213900259"></p><h2 id="一、搭建gitlab仓库"><a href="#一、搭建gitlab仓库" class="headerlink" title="一、搭建gitlab仓库"></a>一、搭建gitlab仓库</h2><p>首先介绍一下如何搭建gitlab仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索gitlab版本 我一般都用最新版latest</span></span><br><span class="line">docker search gitlab/gitlab-ce</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><p>我没用docker run的命令来启动gitlab，因为我怕忘记命令，所以用的docker-compose.yml文件启动方式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;gitlab/gitlab-ce:latest&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url &#x27;http://ip:8929&#x27; # 此处ip替换为你当前服务器/虚拟机的ip</span></span><br><span class="line"><span class="string">        gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8929:8929&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2224:2224&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./config:/etc/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./logs:/var/log/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./data:/var/opt/gitlab&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>注意：刚启动容器初始化比较慢，可能一直访问不了或者报502错误，不要紧张，等一会儿就行了。可以通过下面的命令来查看容器日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f [容器id/容器名]</span><br></pre></td></tr></table></figure><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404210036687.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404210036687.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230404210036687"></p><p>gitlab默认用户名是root，密码需要我们进入gitlab容器内查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab cat /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404210100141.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404210100141.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230404210100141"></p><p>登录之后就可以在设置里面修改密码。</p><p>之后就可以完成你想进行的操作了：repo、ci&#x2F;cd等等。</p><h2 id="二、搭建gitlab-runner"><a href="#二、搭建gitlab-runner" class="headerlink" title="二、搭建gitlab-runner"></a>二、搭建gitlab-runner</h2><p>以我们学院的“水杉在线”为例，我们都是在gitlab中国的jihulab进行开发部署，其流程完全符合Devops流程，与很多知名企业的软件开发过程一致，对就业非常有帮助。不过“水杉在线”是基于k8s集群化的分布式架构，比较复杂，此处只介绍单机部署。</p><p>同样 docker安装gitlab-runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search gitlab/gitlab-runner</span><br></pre></td></tr></table></figure><p>拉取gitlab-runner镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-runner</span><br></pre></td></tr></table></figure><p>docker-compose.yml启动容器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">runner-guanfang:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">gitlab/gitlab-runner:latest</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">gitlab-runner</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span>        <span class="comment">#务必保证 /home/runner/config有写的权限否则容器启动会失败</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./config:/etc/gitlab-runner</span>  <span class="comment">#容器与宿主机runner配置文件挂载，防止容器重启或者recreate数据丢失，这个很重要。</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span> <span class="comment">#用于runner容器共享宿主机的docker，不然在runner容器里起容器端口挂载就会有问题了。解决Docker in Docker的问题。</span></span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>gitlab-runner信息注册关联gitlab仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一个gitlab-runner是容器名，第二个是image</span></span><br><span class="line">docker exec -it gitlab-runner gitlab-runner register</span><br></pre></td></tr></table></figure><p>记下来就是注册信息 需要注意：最后选择docker版本的时候建议：<code>docker:latest</code></p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/479335d429e84e679aa410435d5bb080.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/479335d429e84e679aa410435d5bb080.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>上图是你的gitlab仓库的某个项目的CI&#x2F;CD信息，可以看到URL和token，这是注册时需要的信息。注意注册时会有tags标签，这个在gitlab-ci.yml中需要指定，所以尽量不要乱起名字，需要保持一致，后续也可以在gitlab中修改。</p><h3 id="gitlab-runner-x2F-config关键配置信息修改"><a href="#gitlab-runner-x2F-config关键配置信息修改" class="headerlink" title="gitlab-runner&#x2F;config关键配置信息修改"></a>gitlab-runner&#x2F;config关键配置信息修改</h3><p>在挂载的数据卷目录下：比如gitlab-runner&#x2F;config下有个config.toml文件，修改她。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config.toml</span><br></pre></td></tr></table></figure><p>基本配置如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">shutdown_timeout</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session_server]</span></span><br><span class="line">  <span class="attr">session_timeout</span> = <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;kirinea&#x27;s gitlab-rnner&quot;</span></span><br><span class="line">  <span class="attr">url</span> = <span class="string">&quot;http://ip:8929/&quot;</span>   <span class="comment"># gitlab的启动URL</span></span><br><span class="line">  <span class="attr">id</span> = <span class="number">1</span></span><br><span class="line">  <span class="attr">token</span> = <span class="string">&quot;************&quot;</span>    <span class="comment"># gitlab仓库ci/cd下runner 的 token</span></span><br><span class="line">  <span class="attr">token_obtained_at</span> = <span class="number">2023</span>-<span class="number">04</span>-<span class="number">03</span>T06:<span class="number">04</span>:<span class="number">11</span>Z</span><br><span class="line">  <span class="attr">token_expires_at</span> = <span class="number">0001</span>-<span class="number">01</span>-<span class="number">01</span>T00:<span class="number">00</span>:<span class="number">00</span>Z</span><br><span class="line">  <span class="attr">executor</span> = <span class="string">&quot;docker&quot;</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="attr">MaxUploadedArchiveSize</span> = <span class="number">0</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    <span class="attr">privileged</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">tls_verify</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">image</span> = <span class="string">&quot;docker:latest&quot;</span>    <span class="comment"># Docker in Docker 就按这个来准没错</span></span><br><span class="line">    <span class="attr">disable_entrypoint_overwrite</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">oom_kill_disable</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_cache</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">volumes</span> = [<span class="string">&quot;/cache&quot;</span>, <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>, <span class="string">&quot;/usr/bin/docker:/usr/bin/docker&quot;</span>, <span class="string">&quot;/root/.m2:/root/.m2&quot;</span>, <span class="string">&quot;/root/.ssh:/root/.ssh&quot;</span>, <span class="string">&quot;/root/.docker/:/root/.docker/&quot;</span>, <span class="string">&quot;/root/.npm/:/root/.npm/&quot;</span>] <span class="comment">#前提本机需要有安装maven、npm、打开ssh、docker等</span></span><br><span class="line">    <span class="attr">shm_size</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>好了 ，接下来就可以编写你项目的<code>gitlab-ci.yml</code>文件了。</p><p>参考：<a href="https://developer.aliyun.com/article/719968">Docker安装Gitlab和Gitlab-Runner并实现项目的CICD-阿里云开发者社区 (aliyun.com)</a></p><h2 id="三、结合CI-x2F-CD执行build、deploy等自动化流程"><a href="#三、结合CI-x2F-CD执行build、deploy等自动化流程" class="headerlink" title="三、结合CI&#x2F;CD执行build、deploy等自动化流程"></a>三、结合CI&#x2F;CD执行build、deploy等自动化流程</h2><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404212424737.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404212424737.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230404212424737"></p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404212457942.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230404212457942.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230404212457942"></p><h2 id="gitlab-ci-yml-和-Dockerfile-写法注意"><a href="#gitlab-ci-yml-和-Dockerfile-写法注意" class="headerlink" title="gitlab-ci.yml 和 Dockerfile 写法注意"></a>gitlab-ci.yml 和 Dockerfile 写法注意</h2><p>我们可以把ci&#x2F;cd当作一个大的脚本服务，里面可以打包镜像，执行docker build上传镜像，这里建议私有库，比如阿里云。</p><p>流程一般如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build</span><br><span class="line">docker tag</span><br><span class="line">docker push</span><br><span class="line">docker rmi</span><br></pre></td></tr></table></figure><p>在gitlab-ci.yml一般分为多个stage：build、test、deploy、cleanup</p><p>根据自己需求编写script。</p><p>一般build阶段如上所述，deploy阶段通过类似于<code>ssh ip bash ***.sh</code>的脚本（前提是将runner所在服务器的ssh公钥放入目标部署服务器的可信公钥） ，这个脚本一般是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull、</span><br><span class="line">docker-compose up -d</span><br><span class="line">等等等等启动容器以及微服务注册中心等工具</span><br></pre></td></tr></table></figure><p><strong>以上就是大致的整个过程 非常有意思和有意义</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建回顾版</title>
      <link href="/2023/04/01/bo-ke-da-jian-hui-gu-ban/"/>
      <url>/2023/04/01/bo-ke-da-jian-hui-gu-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建回顾"><a href="#博客搭建回顾" class="headerlink" title="博客搭建回顾"></a>博客搭建回顾</h1><h2 id="博客初心"><a href="#博客初心" class="headerlink" title="博客初心"></a>博客初心</h2><p>其实我之前喜欢一个人瞎捣鼓这些东西，但是瞎捣鼓嘛，难免会遇到一堆的问题，比如<code>java jar</code>包冲突、<code>frp</code>内网穿透失败原因可能是阿里的云服务器安全组配置被修改了（我昨天就遇到了，气死）…… 因此 我就想着把遇到的一些问题给记录下来，比如在刚开始学习<code>kubernetes</code>的时候，没有比较多的云服务器来建立集群，但是也不想用虚拟机这种古老的玩意儿，所以就给学院发的电脑装了<code>linux</code>(这里感谢王原昭师兄给我的一些帮助）在学习<code>minikube</code>的过程中遇到了一些问题我顺手就给写下来了，所以就想着放到自己的博客上去了。</p><h2 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h2><p>博客搭建的框架我选择的是<code>hexo</code>（因为看到师兄用的这个，哈哈哈哈）。其实主要是因为<code>hexo</code>开源，同时也提供了很多的主题供我们选择，可以将我们的代码和配置打包成静态网页，通过<code>github pages</code>来渲染出来，并且省了自己公网映射的步骤，很方便。</p><p>主题就是<code>hexo-theme-bamboo</code>，选择这个主题是因为不光想写博客，还想分享记录一些生活琐碎。</p><h2 id="博客亮点"><a href="#博客亮点" class="headerlink" title="博客亮点"></a>博客亮点</h2><p>并不是单纯的技术博客，同时会在你阅读博客感到疲乏之余在留言板进行吐槽和分享；也可以看看当下的时事热点；也可以欣赏一下我的偶像许嵩的唯美音乐，也可以看看图库好看的照片。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>可以看见我的博客首页还有我喜欢的歌手的<code>B站MV</code>,还有我的简历和图库等等。所以希望以后在开源领域打下一些基础之后，就通过域名的方式正式搭建一个属于自己的个人网站并开源出来供大家使用。</p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/1b41530bbcc911f607dfa29f9d1887f.jpg" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/1b41530bbcc911f607dfa29f9d1887f.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="ECNUeryyds!" style="zoom:50%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s初体验-minikube突破隔断访问限制(以nginx为例)</title>
      <link href="/2023/03/10/k8s-chu-ti-yan-minikube-tu-po-ge-duan-fang-wen-xian-zhi-yi-nginx-wei-li/"/>
      <url>/2023/03/10/k8s-chu-ti-yan-minikube-tu-po-ge-duan-fang-wen-xian-zhi-yi-nginx-wei-li/</url>
      
        <content type="html"><![CDATA[<h1 id="minikube部署对外访问配置"><a href="#minikube部署对外访问配置" class="headerlink" title="minikube部署对外访问配置"></a>minikube部署对外访问配置</h1><p>我们现在大家都知道了 minikube集群相当于k8s的一个虚拟机。</p><p>同时pod每次消亡重建之后都会分配一个虚拟的ip，这个ip可供集群内部访问，但是如果要对外访问呢？</p><p>我们可以给他暴露ip出来，但是如果pod宕机后重建ip就发生了变化，所以不能对pod进行ip的暴露。</p><p><strong>那应该对什么进行暴露呢?</strong></p><p>我们首先需要了解service，简而言之，为了解决pod动态变化的虚拟ip，因此service 相当于某组pod的外部访问接口。因此我们对service为单位进行ip的暴露即可。这同时也解决了在minikube中一开始学习的时候必须要进入minikube之后才可以访问pod的问题。</p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20200408194716912-16783627155621.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20200408194716912-16783627155621.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="From 黑马" style="zoom:67%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">lucky@thinkcentre:/work/k8s$ kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n dev</span><br><span class="line">service/svc-nginx1 exposed</span><br><span class="line">lucky@thinkcentre:/work/k8s$ kubectl get svc svc-nginx1 -n dev -o wide</span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class="line">svc-nginx1   ClusterIP   10.111.120.200   &lt;none&gt;        80/TCP    30s   run=nginx</span><br><span class="line">lucky@thinkcentre:/work/k8s$ curl 10.111.120.200:80</span><br><span class="line">^C</span><br><span class="line">lucky@thinkcentre:/work/k8s$ minikube ssh</span><br><span class="line">Last login: Thu Mar  9 10:23:21 2023 from 192.168.49.1</span><br><span class="line">docker@minikube:~$ curl 10.111.120.200:80</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">docker@minikube:~$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面暴露端口的方式是clusterIp，因此还是只是集群内部可以访问，只不过相比较上一节minikube外部无法访问pod来说没有实质性的改变，改变的只不过是访问svc从而访问高可用pod。因此我们想要minikube外部可以访问的话，就需要将type修改为NodePort</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deploy nginx --name=svc-nginx2 --port=80 --target-port=80 --type=NodePort -n dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">port-forward 端口转发且允许任意ip访问</span></span><br><span class="line">kubectl port-forward --address 0.0.0.0 -n dev service/svc-nginx2 80:80</span><br></pre></td></tr></table></figure><p>执行上述命令后 即可在同一网段内访问nginx，不受minikube限制，如果想让外网访问，则需要对80端口做一个内网穿透，参考我之前的文章即可。</p><p><strong>其实从port-forward可以看出本质是端口转发到主机而已</strong><br><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230310090645549.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230310090645549.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230310090645549" style="zoom:50%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s初体验---nginx(pod)部署并访问</title>
      <link href="/2023/03/09/k8s-chu-ti-yan-nginx-pod-bu-shu-bing-fang-wen/"/>
      <url>/2023/03/09/k8s-chu-ti-yan-nginx-pod-bu-shu-bing-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s初学习—基于k8s部署nginx"><a href="#k8s初学习—基于k8s部署nginx" class="headerlink" title="k8s初学习—基于k8s部署nginx"></a>k8s初学习—基于k8s部署nginx</h1><p>创建命名空间dev</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns dev</span><br></pre></td></tr></table></figure><p>运行nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image=nginx:1.17.1 --port=80 --namespace=dev</span><br></pre></td></tr></table></figure><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230308112157646.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230308112157646.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230308112157646"></p><p>查看某个命名空间下的pod的信息 根据pod-name</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod nginx -n dev</span><br></pre></td></tr></table></figure><p>试试访问pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 172.17.0.5:80</span><br></pre></td></tr></table></figure><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309160542890.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309160542890.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230309160542890" style="zoom:50%;" /><p>很尴尬 不能访问 果然教程不帮你踩坑。</p><p>问了chatgpt，给出几种方案。我试了第一种</p><p>首先 我用<code>minikube ssh</code>指令之后 进入minikube内部，再访问居然成功了。</p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309160735086.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309160735086.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230309160735086" style="zoom:50%;" /><p>接下来我继续问chatGPT这是为什么 ？</p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309161439775.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309161439775.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230309161439775" style="zoom:50%;" /><p>但是实际上我测试了一下都是正常的 chatgpt并没有帮我解决？</p><p>接下来就问了师兄，师兄一语中的，师兄总是那么神。</p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309161606272.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309161606272.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230309161606272" style="zoom:50%;" /><p>所以chatGPT其实有的时候也并不是那么神啦！！！</p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309161656417.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230309161656417.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230309161656417" style="zoom:50%;" /><p>到此结束！</p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透教程</title>
      <link href="/2023/02/18/frp-nei-wang-chuan-tou-jiao-cheng/"/>
      <url>/2023/02/18/frp-nei-wang-chuan-tou-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="frp搭建内网穿透教程"><a href="#frp搭建内网穿透教程" class="headerlink" title="frp搭建内网穿透教程"></a>frp搭建内网穿透教程</h1><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230218213701529.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230218213701529.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230218213701529" style="zoom:50%;" /><p>我们用过服务器的同学都知道ssh，就是一个远程连接服务器的协议，如果是对于实验室的电脑则需要在同一局域网下才可以连接。用过阿里云服务器或者腾讯云的同学也知道，这种公网ip的服务器可以直接不受局域网影响即可访问。</p><p>所以可能就有同学想问是否可以把实验室的服务器也弄成公网。答案是：有</p><ul><li>花生壳（不推荐）</li></ul><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230218212009006.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230218212009006.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230218212009006"></p><ul><li>frp（推荐）</li></ul><p>1、前提需要一台公网服务器，比如阿里云用来当作frp的服务器端，实验室的电脑则作为客户端。（可借用师兄或者某台作为服务器端）</p><p>frp仓库：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>下载后解压 <code>tar -zxvf ***.tar.gz</code> 再进入该目录</p><p><code>vim frps.ini</code> 编辑服务器端配置 for example</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">123456789</span></span><br><span class="line"><span class="attr">dashboard_user</span> = lucky</span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="number">111111111</span>   <span class="comment">#该三部分自己设置</span></span><br></pre></td></tr></table></figure><p>2、运行服务器端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &amp; #建议nohup保持云服务器不关机</span><br></pre></td></tr></table></figure><p>3、客户端</p><p>下载过程以及解压过程如上所述</p><p>不同之处：</p><p><code>vim frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = ***.***.**.** <span class="comment">#公网ip</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span> <span class="comment">#服务器端口</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">123456789</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span> <span class="comment">#本地ip</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span> <span class="comment">#需要映射的端口</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">222</span> <span class="comment">#映射到公网服务器的哪个端口</span></span><br></pre></td></tr></table></figure><p>4、运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>5、测试连接即可成功</p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_49764009/article/details/122018688">https://blog.csdn.net/weixin_49764009/article/details/122018688</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>chatgpt使用教程</title>
      <link href="/2023/02/12/chatgpt-shi-yong-jiao-cheng/"/>
      <url>/2023/02/12/chatgpt-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="chatGPT使用教程"><a href="#chatGPT使用教程" class="headerlink" title="chatGPT使用教程"></a>chatGPT使用教程</h1><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230212211052395.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230212211052395.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230212211052395"></p><p>chatgpt官网：<a href="https://openai.com/blog/chatgpt/">https://openai.com/blog/chatgpt/</a></p><p>注册或者使用Google or Microsoft账户登陆即可 （I have used a google account which I have several years ago.）</p><p>当提示此地区不可用或者不提供服务的情况</p><p>梯子改为全局 地区不要选HK，我用的Korea</p><p>修改为全局后，在浏览器地址栏输入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注意<span class="attr">javascript</span>: 要手动输入 无法复制</span><br><span class="line"><span class="attr">javascript</span>:<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">window</span>.<span class="property">localStorage</span>).<span class="title function_">find</span>(<span class="function"><span class="params">i</span>=&gt;</span>i.<span class="title function_">startsWith</span>(<span class="string">&#x27;@@auth0spajs&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>然后回车 再刷新当前页面即可进入chatgpt短信验证部分</p><p>短信服务购买：<a href="https://sms-activate.org/">https://sms-activate.org/</a></p><p>最近一直在涨价，我选的是马来西亚</p><p>亲测可用 越晚涨价越离谱</p><h5 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h5><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230212210012744.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230212210012744.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230212210012744"></p><p>When you have finished these steps.You can use chatgpt happily now !!!</p><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><p>地区不提供服务解决方法：<a href="https://cloud.tencent.com/developer/article/2190198">https://cloud.tencent.com/developer/article/2190198</a></p><p>短信验证解决方案：<a href="https://www.xnbeast.com/create-openai-chatgpt-account/">https://www.xnbeast.com/create-openai-chatgpt-account/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s学习教程(基础配置)--part 1</title>
      <link href="/2023/01/15/k8s-xue-xi-jiao-cheng-ji-chu-pei-zhi-part-1/"/>
      <url>/2023/01/15/k8s-xue-xi-jiao-cheng-ji-chu-pei-zhi-part-1/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s学习教程（一、初始配置）"><a href="#k8s学习教程（一、初始配置）" class="headerlink" title="k8s学习教程（一、初始配置）"></a>k8s学习教程（一、初始配置）</h1><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230115202715679.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230115202715679.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115202715679" style="zoom: 33%;" /><h2 id="1-minikube-启动过程"><a href="#1-minikube-启动过程" class="headerlink" title="1 minikube 启动过程"></a>1 minikube 启动过程</h2><p>在启动之前，需要下载docker！！！</p><h3 id="1-1-minikube-start"><a href="#1-1-minikube-start" class="headerlink" title="1.1 minikube start"></a>1.1 minikube start</h3><p>启动指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动指令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先设置一下k8s版本   注意：大坑  不明原因</span></span><br><span class="line">sudo usermod -aG docker lucky &amp;&amp; newgrp docker</span><br><span class="line">minikube config set kubernetes-version v1.23.3</span><br><span class="line">minikube start --image-mirror-country=&#x27;cn&#x27;</span><br></pre></td></tr></table></figure><p>需要切换一个用户 同时需要用ssh工具重新连接这个新用户，不可以su 新用户，这样才可以启动dashboard</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置minikube dashboard的ip和端口为本机，以便外网访问 --address 为 ip</span></span><br><span class="line">kubectl proxy --port=7999 --address=&#x27;202.120.87.115&#x27; --accept-hosts=&#x27;^.*&#x27; &amp;</span><br></pre></td></tr></table></figure><h3 id="1-2-minikube-stop"><a href="#1-2-minikube-stop" class="headerlink" title="1.2 minikube stop"></a>1.2 minikube stop</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minikube stop </span><br><span class="line">minikube delete</span><br><span class="line">minikube start</span><br></pre></td></tr></table></figure><h2 id="2-minikube-集群部署初体验"><a href="#2-minikube-集群部署初体验" class="headerlink" title="2 minikube 集群部署初体验"></a>2 minikube 集群部署初体验</h2><h3 id="2-1-kubectl"><a href="#2-1-kubectl" class="headerlink" title="2.1 kubectl"></a>2.1 kubectl</h3><p>常用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 yaml配置文件 部署nginx集群</span></span><br><span class="line">kubectl apply -f nginx.yaml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过created方式创建并部署nginx集群</span></span><br><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以nodeport方式暴露端口 80 -&gt; 8080</span></span><br><span class="line">kubectl expose deployment nginx --port=8080 --target-port=80 --type=&quot;NodePort&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">port-forward 端口转发且允许任意ip访问，即可在别处访问 8080 -&gt; 8080</span></span><br><span class="line">kubectl port-forward --address 0.0.0.0 -n default service/nginx 8080:8080</span><br></pre></td></tr></table></figure><p>nginx.yaml文件内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看pod和service指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">kubectl get services</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看pod详细信息</span></span><br><span class="line">kubectl describe deployment nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看service相信信息</span></span><br><span class="line">kubectl describe service nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床配置及选型</title>
      <link href="/2023/01/15/tu-chuang-pei-zhi-ji-xuan-xing/"/>
      <url>/2023/01/15/tu-chuang-pei-zhi-ji-xuan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="图床的基本配置与选型"><a href="#图床的基本配置与选型" class="headerlink" title="图床的基本配置与选型"></a>图床的基本配置与选型</h1><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230115200604826.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230115200604826.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115200604826"></p><p>图床有哪些基本配置和方案，可以参考我师兄的博客<a href="https://icyleaves.github.io/2022/12/30/22-12-30-find-image-server/#more">https://icyleaves.github.io/2022/12/30/22-12-30-find-image-server/#more</a></p><p>我师兄烨神是我滴偶像-超级厉害，我的个人网站也是看到他网站之后心血来潮弄的</p><p>但是我最后没有选择师兄的方案，原因：</p><p>我发现<code>imgur</code>和<code>Github</code>这类外网一样，没有加速器的话就需要科学上网，不信你看我前两篇文章里的图片是不是都访问不了，因我我采用的<code>github</code>云存储方式，配合<code>jsDelivr</code>加速，可是<code>jsDelivr</code>已经崩了，不科学上网的话是看不到那些图片的。</p><p>所以，最后我选择了<code>picGo + 阿里云OSS</code>，阿里云你们都懂得，国内最牛的云计算和云存储好吧，我上一届师兄就是去的阿里云，年薪<code>60w+</code>，啊啊啊啊羡慕死了啊</p><p>因为阿里云是国内的，所以不怕访问不了图片，而且价格很低很低，我选择的低频访问方案，<code>0.08rmb/GB/月</code></p><p><img src="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230115200159615.png" class="lazyload placeholder" data-srcset="https://luckyblob.oss-cn-shanghai.aliyuncs.com/postimgs/image-20230115200159615.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230115200159615"></p><p><code>picGo</code>和<code>阿里云OSS</code>的开通网上教程一大堆，就不赘述了。</p><p>我本科毕业设计就是用的<code>阿里云OSS</code>，如果比较喜欢<code>linux</code>的，比较推荐阿里云服务器的学生优惠，<code>30+rmb/年</code>，但是只能用一年，买来学习Linux的基础知识很Nice啦！</p><p>至于为什么最后选择<code>阿里云OSS</code>，可能是因为准备把这个作为个人网站而不是个人博客，也可以让非计算机行业的人访问，就是这样。</p>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
